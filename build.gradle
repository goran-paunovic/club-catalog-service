plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.springdoc.openapi-gradle-plugin' version '1.9.0'
}

group = 'com.pgcode.clubs'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
    set('testContainersVersion', "1.20.1")
    set('mapStructVersion', "1.5.5.Final")
    set('lombokVersion', "1.18.30")
    set('flywayVersion', "10.17.0")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.retry:spring-retry'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    implementation 'org.hibernate:hibernate-spatial:6.5.2.Final'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.flywaydb:flyway-core:${flywayVersion}"
    runtimeOnly "org.flywaydb:flyway-database-postgresql:${flywayVersion}"

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom("org.testcontainers:testcontainers-bom:${testContainersVersion}")
    }
}

bootBuildImage {
    imageName = "club-catalog-service"
    environment = ["BP_JVM_VERSION" : "21.*"]

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}

openApi {
    apiDocsUrl.set("http://localhost:9001/v3/api-docs")
}